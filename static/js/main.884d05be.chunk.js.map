{"version":3,"sources":["Context.js","components/OneComment.js","components/Comments.js","App.js","serviceWorker.js","index.js"],"names":["CommentContext","React","createContext","CommentProvider","state","comments","dispatch","action","type","oldComments","maxId","map","comment","Math","max","id","info","name","photo","content","push","setState","Provider","value","this","props","children","Component","CommentConsumer","Consumer","OneComment","theComment","Divider","variant","style","margin","Grid","container","wrap","spacing","item","Avatar","alt","src","justifyContent","xs","zeroMinWidth","textAlign","color","time","Comments","handelChangeName","e","val","target","commentName","handelChangePhoto","commentPhoto","handelChangeContent","commentContent","handleClose","dialog","sendtoDispatch","String","sendComment","newComment","open","Paper","padding","Button","onClick","className","key","Dialog","fullScreen","onClose","AppBar","Toolbar","IconButton","edge","aria-label","Typography","flex","autoFocus","bind","List","ListItem","button","ListItemText","primary","secondary","TextField","onChange","label","placeholder","multiline","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.884d05be.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nconst CommentContext = React.createContext();\r\n\r\n\r\n\r\nexport  class CommentProvider extends Component {\r\n\r\n    state={\r\n        comments:[\r\n            \r\n        ],\r\n        dispatch:action=>{\r\n            if (action.type===\"newComment\"){\r\n                const oldComments=this.state.comments;\r\n                var maxId=0\r\n                oldComments.map(\r\n                    comment=>{\r\n                        maxId=Math.max(maxId,comment.id)\r\n                    }\r\n                )\r\n                const info={\r\n                    id:maxId+1,\r\n                    name:action.name,\r\n                    photo:action.photo,\r\n                    content:action.content\r\n                }\r\n                oldComments.push(info)\r\n                this.setState(\r\n                    {comments:oldComments,}\r\n                    );\r\n            }\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CommentContext.Provider value={this.state}>\r\n                    {this.props.children}\r\n                </CommentContext.Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst CommentConsumer= CommentContext.Consumer;\r\n\r\nexport default CommentConsumer;","import React, { Component } from 'react'\r\nimport { Divider, Avatar, Grid } from \"@material-ui/core\";\r\n\r\nexport default class OneComment extends Component {\r\n    render() {\r\n        const {theComment}=this.props;\r\n        return (\r\n            <div>\r\n            <Divider variant=\"fullWidth\" style={{ margin: \"30px 0\" }} />\r\n            <Grid container wrap=\"nowrap\" spacing={2}>\r\n             <Grid item>\r\n            <Avatar alt={theComment.name} src={theComment.photo} />\r\n          </Grid>\r\n          <Grid justifyContent=\"left\" item xs zeroMinWidth>\r\n        <h4 style={{ margin: 0, textAlign: \"left\" }}>{theComment.name}</h4>\r\n            <p style={{ textAlign: \"left\" }}>\r\n        {theComment.content}\r\n        \r\n        {\" \"}\r\n            </p>\r\n            <p style={{ textAlign: \"left\", color: \"gray\" }}>\r\n              {theComment.time}\r\n            </p>\r\n          </Grid>\r\n        </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {  Paper, Grid } from \"@material-ui/core\";\r\nimport CommentConsumer from \"../Context\";\r\nimport OneComment from \"./OneComment\"\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport default class Comments extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            dialog:false,\r\n            commentName:\"\",\r\n            commentPhoto:\"\",\r\n            commentContent:\"\",\r\n        }\r\n    }\r\n    handelChangeName=(e)=>{\r\n      const val=e.target.value;\r\n      this.setState(\r\n        {\r\n          commentName:val\r\n        }\r\n      )\r\n    }\r\n    handelChangePhoto=(e)=>{\r\n      const val=e.target.value;\r\n      this.setState(\r\n        {\r\n          commentPhoto:val\r\n        }\r\n      )\r\n     }\r\n     handelChangeContent=(e)=>{\r\n       const val=e.target.value;\r\n      this.setState(\r\n       {\r\n          commentContent:val\r\n        }\r\n      )\r\n     }\r\n    handleClose=()=>{\r\n      this.setState(\r\n        {\r\n          dialog:false\r\n        }\r\n      )\r\n    }\r\n    sendtoDispatch=(dispatch)=>{\r\n\r\n      dispatch(\r\n        {\r\n          \"type\":\"newComment\",\r\n          \"name\":String(this.state.commentName),\r\n          \"photo\":String(this.state.commentPhoto),\r\n          \"content\":String(this.state.commentContent),\r\n        }\r\n      )\r\n    }\r\n    sendComment=(dispatch,e)=>{\r\n      this.handleClose()\r\n      this.sendtoDispatch(dispatch)\r\n\r\n    }\r\n    newComment=()=>{\r\n      this.setState(\r\n        {\r\n          dialog:true\r\n        }\r\n      )\r\n    }\r\n    render() {\r\n        const open=this.state.dialog;\r\n        return (\r\n            <div>\r\n                 <Paper style={{ padding: \"40px 20px\" }}>\r\n                     <h1>Comments</h1>\r\n                     <br></br>\r\n                     <br></br>\r\n                     <Button\r\n                     onClick={this.newComment}\r\n                     variant=\"contained\"\r\n                     color=\"secondary\"\r\n                     className=\"NewCommentBtn\"\r\n                      >\r\n                      New Comment</Button>\r\n                    <CommentConsumer>\r\n                        {\r\n                            value=>{\r\n                                const {comments}=value;\r\n                                return(\r\n                                    <div>\r\n                                        {\r\n                                            comments.map(\r\n                                                comment=>{\r\n                                                   return(\r\n                                                       <OneComment key={comment.id} theComment={comment}></OneComment>\r\n                                                   )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                    </CommentConsumer>\r\n\r\n\r\n\r\n                </Paper>\r\n\r\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* new comment diallog */}\r\n\r\n          <CommentConsumer>\r\n                {\r\n                  value=>{\r\n                    const {dispatch}=value;\r\n                    return(\r\n                      <Dialog fullScreen open={open} onClose={this.handleClose}>\r\n\r\n\r\n<AppBar color=\"secondary\">\r\n          <Toolbar>\r\n            <Grid>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n            </IconButton>\r\n            </Grid>\r\n            <Grid>\r\n            <Typography variant=\"h6\">\r\n              Type your new comment\r\n            </Typography>\r\n            </Grid>\r\n            <Grid style={{flex:1}}>\r\n            <Button id=\"right-side\" autoFocus color=\"inherit\"  onClick={this.sendComment.bind(this,dispatch)}>\r\n              Send\r\n            </Button>\r\n            </Grid>\r\n           \r\n       \r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem button>\r\n            <ListItemText primary=\"Phone ringtone\" secondary=\"Titania\" />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem >\r\n          <TextField\r\n          color=\"secondary\"\r\n          onChange={this.handelChangeName.bind(this)}               \r\n          className=\"field\"\r\n          label=\"Name\"\r\n          placeholder=\"Type your name here\"\r\n          variant=\"outlined\"\r\n        />\r\n          </ListItem>\r\n          <ListItem >\r\n          <TextField\r\n          onChange={this.handelChangePhoto.bind(this)}    \r\n          color=\"secondary\"\r\n\r\n          className=\"field\"\r\n          label=\"Photo link\"\r\n          placeholder=\"Copy your profile photo link here\"\r\n          variant=\"outlined\"\r\n        />\r\n          </ListItem>\r\n          <ListItem >\r\n          <TextField\r\n          onChange={this.handelChangeContent.bind(this)}    \r\n          color=\"secondary\"\r\n          className=\"field\"\r\n          id=\"outlined-textarea\"\r\n          label=\"Your Comment\"\r\n          multiline\r\n          placeholder=\"Type your comment here\"\r\n          variant=\"outlined\"\r\n        />\r\n          </ListItem>\r\n        </List>\r\n\r\n\r\n\r\n\r\n\r\n                        </Dialog>\r\n                    )\r\n                  }\r\n                  \r\n                }\r\n\r\n          </CommentConsumer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n// import {Typography} from '@material-ui/core';\nimport {Container} from '@material-ui/core';\nimport Comments from \"./components/Comments\"\n// import { Divider, Avatar, Grid, Paper } from \"@material-ui/core\";\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n       <Comments></Comments>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {CommentProvider} from \"./Context\"\n\nReactDOM.render(\n  <CommentProvider>\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </CommentProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}